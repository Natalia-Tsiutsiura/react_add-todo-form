{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","initialUser","userId","usersFromServer","find","initialTodos","App","useState","setTitle","titleError","setTitleError","setTodos","selectedUserId","setSelectedUserId","userError","setUserError","maxIdNumber","Math","max","action","method","onSubmit","event","preventDefault","existTodos","htmlFor","type","placeholder","value","onChange","validTitle","test","target","trimStart","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e02c63b8.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../Types/User';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../Types/Todo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo',\n        { 'TodoInfo--completed': todo.completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && (\n        <UserInfo user={todo.user} />\n      )}\n    </article>\n  );\n};\n","import { Todo } from '../../Types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Todos = {\n  todos: Array<Todo>;\n};\n\nexport const TodoList: React.FC<Todos> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './Types/Todo';\n\nconst initialUser = (userId: number) => {\n  return usersFromServer.find((user) => user.id === userId) || null;\n};\n\nconst initialTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: initialUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [todos, setTodos] = useState(initialTodos);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [userError, setUserError] = useState(false);\n\n  const resetForm = () => {\n    setTitle('');\n    setTitleError(false);\n    setSelectedUserId(0);\n    setUserError(false);\n  };\n\n  const addTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const validTitle = /\\S/.test(event.target.value);\n\n    setTitle(event.target.value.trimStart());\n    setTitleError(!validTitle);\n  };\n\n  const addUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n    setUserError(false);\n  };\n\n  const addTodo = (todo: Todo) => {\n    setTodos(existTodos => [...existTodos, todo]);\n  };\n\n  const maxIdNumber = Math.max(...todos.map(todo => todo.id));\n\n  const addNewPost = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setTitleError(!title);\n    setUserError(!selectedUserId);\n\n    if (!title || !selectedUserId) {\n      return;\n    }\n\n    addTodo({\n      id: maxIdNumber + 1,\n      title,\n      completed: false,\n      userId: selectedUserId,\n      user: initialUser(selectedUserId),\n    });\n\n    resetForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={addNewPost}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            id=\"title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={addTitle}\n          />\n\n          {titleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            id=\"user\"\n            data-cy=\"userSelect\"\n            value={selectedUserId}\n            onChange={addUser}\n          >\n            <option value=\"0\" key={0} disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {userError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}